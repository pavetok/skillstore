Первый прототип

* intro
  У нас есть некоторый набор навыков
  У нас есть некоторый набор пользователей
  Пользователи хотят изучить навыки, которые им интересны
  Пользователи хотят обучить навыкам, которыми они владеют

  Для первого прототипа мы не делаем всего того без чего можем
  обойтись - регистрации пользователей например. Минимальный
  функционал, просто чтобы проверить на верном ли мы пути, и если
  нет - чтобы потребовалась минимальная переделка.

  Иконки:
  ⇲  api-вызов
  ↴  параметры api-вызова
  ↔  рестарты
  ←  возвращаемые значения

* Посетитель может залогиниться как Пользователь
  ⇲  login
  ↴  email password
  ←  'ok user
  ←  'fail 'invalid-login

  Строго говоря в случае успеха мы должны возвращать sessid,
  из которого можно тривиально получить сущность user, но это детали.

  В дальнейшем мы пробрасываем состояние сессии в user чтобы
  логгировать действия и (в будущем) проверять права доступа.

* Пользователь может вылогиниться (завершить сессию)
  ⇲  logout
  ↴
  ←  'ok

* Умолчания

  Для всех api-вызовов, которые делает пользователь, мы неявно
  предполагаем, что среди входных параметров есть сущность текущего
  пользователя, полученная по его session-id после процедуры
  логина. Даже если этот объект не используется внутри вызова, он
  нужен нам для целей сбора статистики, логгинга и обработки возможных
  сбоев.

  Для всех api-вызовов, куда пробрасывается user мы неявно
  предполагаем: ←  'fail 'invalid user

  Для всех api-вызовов, которые принимают объект в качестве параметра, мы
  неявно предполагаем, что вместо объекта можно передать его
  идентификатор, или, в случае, если объект необходимо создать, —
  список его полей. Непереданные поля будут заполнены значениями по
  умолчанию.

  Для всех api-вызовов, которые возвращают объект или список объектов
  мы неявно предполагаем параметр fieldset, в котором передается
  список полей, которые станут ключами в возвращаемых парах
  ключ:значение.

  Для всех api-вызовов, которые возвращают список объектов, мы неявно
  предполагаем наличие двух необязательных параметров lim и off, со
  значениями по умолчанию default-limith и 0, чтобы задать границы
  среза полученной выборки.

* Пользователь может просмотреть все навыки в системе
  ⇲  get-list-of-skills
  ↴
  ←  list<skill> Список навыков

* Поиск навыка среди всех навыков в системе

  get-search
  get-details
  get-entity

* Просмотреть конкретные поля конкретного навыка
  ⇲  get-skill
  ↴  skill Идентификатор навыка
  ↴  list<skill> либо список таких идентификторов
  ←  'ok skill Набор полей объекта
  ←  'ok list<skill> или список таких наборов
  ←  'fail 'skill-not-found

* Пользователь может создать новый навык и добавить его в список существующих в системе навыков
  ⇲  make-skill
  ↴  skill
  ↔  duplicate stoplist mistakes
  ←  'ok skill
  ←  'fail 'restart-cancelled

* Пользователь, может добавить любой существующий навык к себе в "хочу научиться" или "могу научить"
  ⇲  add-skill-to-learn
  ↴  skill
  ←  'ok
  ←  'fail 'skill-not-found

  ⇲  add-skill-to-teach
  ↴  skill
  ←  'ok
  ←  'fail 'skill-not-found

* Пользователь может удалить любой из присутствующих навыков из "хочу научиться" или "могу научить"
  ⇲  rm-skill-to-learn
  ↴  skill
  ←  'ok
  ←  'fail 'skill-not-found

  ⇲  rm-skill-to-teach
  ↴  skill
  ←  'ok
  ←  'fail 'skill-not-found

* Пользователь может просматривать списки навыков, которые он добавил к себе в "хочу научиться" или "могу научить"
  ⇲  get-skill-to-learn
  ↴
  ←  'ok list<skill>

  ⇲  get-skill-to-teach
  ↴
  ←  'ok list<skill>

* Пользователь может запросить список пользователей, которые могут обучить конкретному навыку
  ⇲  get-teachers
  ↴  skill
  ←  'ok list<user>
  ←  'fail 'skill-not-found

* Пользователь может запросить список пользователей, которые хотят изучить конкретный навык
  ⇲  get-learners
  ↴  skill
  ←  'ok list<user>
  ←  'fail 'skill-not-found

* TestSuite:

** Проверка добавления навыков к себе
   ⇲  login, получаем user
   ⇲  get-list-of-skills, получаем список навыков
   Выбираем случайный навык, добавляем его в "хочу научиться":  ⇲  add-skill-to-learn
   Выбираем случайный навык, добавляем его в "могу научить":  ⇲ add-skill-to-teach
   Проверяем, что навыки добавились:  ⇲  get-skill-to-learn, ⇲
   get-skill-to-teach
   ⇲  logout

** Проверка создания навыков в системе
   ⇲  login, получаем user
   Создаем новый навык ⇲  make-skill
   Получаем все навыки в системе ⇲  get-list-of-skills
   Проверяем, что нужный навык присутствует в списк
   Получаем необходимые поля навыка и проверяем правильность их
   заполнения.
   ⇲  logout

** Тест на поиск learners & teachers
   ⇲  login, получаем user
   Создаем новый "навык-1" ⇲  make-skill
   добавляем его в "хочу научиться":  ⇲  add-skill-to-learn
   Создаем новый "навык-2" ⇲  make-skill
   ⇲  logout
   ⇲  login, получаем user
   ⇲  get-list-of-skills, получаем список навыков
   Находим в списке навыков созданные "навык-1" и "навык-2"

   добавляем его в "хочу научиться":  ⇲  add-skill-to-learn
   ⇲  logout
